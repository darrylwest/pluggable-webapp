#!/bin/bash

# Valkey Installation and Configuration Script for Ubuntu 24.10
# Author: DevOps Engineer
# Description: Automated installation and basic configuration of Valkey

set -euo pipefail

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration variables
VALKEY_PORT=${VALKEY_PORT:-6379}
VALKEY_CONFIG_DIR="/etc/valkey"
VALKEY_DATA_DIR="/var/lib/valkey"
VALKEY_LOG_DIR="/var/log/valkey"
VALKEY_USER="valkey"
INSTALL_COMPAT=${INSTALL_COMPAT:-false}
ENABLE_AUTH=${ENABLE_AUTH:-false}
VALKEY_PASSWORD=""
BIND_ADDRESS=${BIND_ADDRESS:-"127.0.0.1"}
MAX_MEMORY=${MAX_MEMORY:-"256mb"}
ENABLE_PERSISTENCE=${ENABLE_PERSISTENCE:-true}

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check if script is run as root
check_root() {
    if [[ $EUID -eq 0 ]]; then
        print_error "This script should not be run as root. Please run as a regular user with sudo privileges."
        exit 1
    fi
}

# Function to check Ubuntu version
check_ubuntu_version() {
    if [[ ! -f /etc/os-release ]]; then
        print_error "Cannot determine OS version"
        exit 1
    fi
    
    source /etc/os-release
    
    if [[ "$ID" != "ubuntu" ]]; then
        print_error "This script is designed for Ubuntu. Detected: $ID"
        exit 1
    fi
    
    print_status "Detected Ubuntu $VERSION"
    
    if [[ "$VERSION_ID" != "24.10" ]]; then
        print_warning "This script is optimized for Ubuntu 24.10. Current version: $VERSION_ID"
        read -p "Continue anyway? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 1
        fi
    fi
}

# Function to update system packages
update_system() {
    print_status "Updating system packages..."
    sudo apt update
    sudo apt upgrade -y
    print_success "System packages updated"
}

# Function to install Valkey
install_valkey() {
    print_status "Installing Valkey..."
    
    # Install main Valkey package
    sudo apt install -y valkey
    
    # Install compatibility package if requested
    if [[ "$INSTALL_COMPAT" == "true" ]]; then
        print_status "Installing Valkey compatibility binaries..."
        sudo apt install -y valkey-compat
    fi
    
    print_success "Valkey installed successfully"
}

# Function to configure Valkey
configure_valkey() {
    print_status "Configuring Valkey..."
    
    # Create backup of original config
    sudo cp /etc/valkey/valkey.conf /etc/valkey/valkey.conf.backup
    
    # Create custom configuration
    sudo tee /etc/valkey/valkey.conf > /dev/null <<EOF
# Valkey Configuration - Generated by Provisioning Script
# $(date)

# Network Configuration
bind ${BIND_ADDRESS}
port ${VALKEY_PORT}
timeout 300
tcp-keepalive 300

# General Configuration
daemonize yes
supervised systemd
pidfile /run/valkey/valkey-server.pid

# Logging
loglevel notice
logfile ${VALKEY_LOG_DIR}/valkey-server.log
syslog-enabled yes
syslog-ident valkey

# Memory Management
maxmemory ${MAX_MEMORY}
maxmemory-policy allkeys-lru

# Directory Configuration
dir ${VALKEY_DATA_DIR}

# Persistence Configuration
EOF

    if [[ "$ENABLE_PERSISTENCE" == "true" ]]; then
        sudo tee -a /etc/valkey/valkey.conf > /dev/null <<EOF
# RDB Configuration
save 900 1
save 300 10
save 60 10000
stop-writes-on-bgsave-error yes
rdbcompression yes
rdbchecksum yes
dbfilename dump.rdb

# AOF Configuration
appendonly yes
appendfilename "appendonly.aof"
appendfsync everysec
no-appendfsync-on-rewrite no
auto-aof-rewrite-percentage 100
auto-aof-rewrite-min-size 64mb
aof-load-truncated yes
EOF
    else
        sudo tee -a /etc/valkey/valkey.conf > /dev/null <<EOF
# Persistence Disabled
save ""
appendonly no
EOF
    fi

    # Add authentication if enabled
    if [[ "$ENABLE_AUTH" == "true" ]]; then
        if [[ -z "$VALKEY_PASSWORD" ]]; then
            VALKEY_PASSWORD=$(openssl rand -base64 32)
            print_warning "Generated random password: $VALKEY_PASSWORD"
            echo "VALKEY_PASSWORD='$VALKEY_PASSWORD'" | sudo tee /etc/valkey/auth.conf > /dev/null
            sudo chmod 600 /etc/valkey/auth.conf
        fi
        
        echo "requirepass $VALKEY_PASSWORD" | sudo tee -a /etc/valkey/valkey.conf > /dev/null
    fi
    
    # Set proper permissions
    sudo chown valkey:valkey /etc/valkey/valkey.conf
    sudo chmod 640 /etc/valkey/valkey.conf
    
    print_success "Valkey configuration updated"
}

# Function to configure system service
configure_service() {
    print_status "Configuring Valkey service..."
    
    # Ensure data and log directories exist with correct permissions
    sudo mkdir -p "$VALKEY_DATA_DIR" "$VALKEY_LOG_DIR"
    sudo chown valkey:valkey "$VALKEY_DATA_DIR" "$VALKEY_LOG_DIR"
    sudo chmod 755 "$VALKEY_DATA_DIR" "$VALKEY_LOG_DIR"
    
    # Enable and start the service
    sudo systemctl daemon-reload
    sudo systemctl enable valkey
    sudo systemctl start valkey
    
    print_success "Valkey service configured and started"
}

# Function to setup firewall rules
setup_firewall() {
    print_status "Configuring firewall..."
    
    if command -v ufw &> /dev/null; then
        if [[ "$BIND_ADDRESS" != "127.0.0.1" ]]; then
            print_warning "Valkey is configured to bind to $BIND_ADDRESS"
            read -p "Allow Valkey port $VALKEY_PORT through firewall? (y/N): " -n 1 -r
            echo
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                sudo ufw allow "$VALKEY_PORT"/tcp
                print_success "Firewall rule added for port $VALKEY_PORT"
            fi
        else
            print_success "Valkey bound to localhost, no firewall changes needed"
        fi
    else
        print_warning "UFW not installed, please configure firewall manually if needed"
    fi
}

# Function to test installation
test_installation() {
    print_status "Testing Valkey installation..."
    
    # Wait for service to be ready
    sleep 2
    
    # Test connection
    if [[ "$ENABLE_AUTH" == "true" ]]; then
        TEST_RESULT=$(valkey-cli -a "$VALKEY_PASSWORD" ping 2>/dev/null || echo "FAILED")
    else
        TEST_RESULT=$(valkey-cli ping 2>/dev/null || echo "FAILED")
    fi
    
    if [[ "$TEST_RESULT" == "PONG" ]]; then
        print_success "Valkey is responding correctly"
    else
        print_error "Valkey test failed"
        return 1
    fi
    
    # Check service status
    if systemctl is-active --quiet valkey; then
        print_success "Valkey service is running"
    else
        print_error "Valkey service is not running"
        return 1
    fi
}

# Function to display installation summary
show_summary() {
    echo
    echo "=================================="
    echo "  Valkey Installation Complete"
    echo "=================================="
    echo "Version: $(valkey-server --version)"
    echo "Port: $VALKEY_PORT"
    echo "Bind Address: $BIND_ADDRESS"
    echo "Data Directory: $VALKEY_DATA_DIR"
    echo "Log File: $VALKEY_LOG_DIR/valkey-server.log"
    echo "Config File: /etc/valkey/valkey.conf"
    
    if [[ "$ENABLE_AUTH" == "true" ]]; then
        echo "Authentication: Enabled"
        echo "Password stored in: /etc/valkey/auth.conf"
    else
        echo "Authentication: Disabled"
    fi
    
    echo
    echo "Useful Commands:"
    if [[ "$ENABLE_AUTH" == "true" ]]; then
        echo "  valkey-cli -a \$VALKEY_PASSWORD"
    else
        echo "  valkey-cli"
    fi
    echo "  sudo systemctl status valkey"
    echo "  sudo systemctl restart valkey"
    echo "  sudo tail -f $VALKEY_LOG_DIR/valkey-server.log"
    echo
}

# Function to parse command line arguments
parse_arguments() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            --port)
                VALKEY_PORT="$2"
                shift 2
                ;;
            --bind)
                BIND_ADDRESS="$2"
                shift 2
                ;;
            --memory)
                MAX_MEMORY="$2"
                shift 2
                ;;
            --password)
                ENABLE_AUTH=true
                VALKEY_PASSWORD="$2"
                shift 2
                ;;
            --enable-auth)
                ENABLE_AUTH=true
                shift
                ;;
            --install-compat)
                INSTALL_COMPAT=true
                shift
                ;;
            --no-persistence)
                ENABLE_PERSISTENCE=false
                shift
                ;;
            --help|-h)
                echo "Usage: $0 [OPTIONS]"
                echo "Options:"
                echo "  --port PORT          Set Valkey port (default: 6379)"
                echo "  --bind ADDRESS       Set bind address (default: 127.0.0.1)"
                echo "  --memory SIZE        Set max memory (default: 256mb)"
                echo "  --password PASS      Set authentication password"
                echo "  --enable-auth        Enable authentication with random password"
                echo "  --install-compat     Install redis compatibility binaries"
                echo "  --no-persistence     Disable data persistence"
                echo "  --help, -h           Show this help message"
                exit 0
                ;;
            *)
                print_error "Unknown option: $1"
                exit 1
                ;;
        esac
    done
}

# Main execution function
main() {
    echo "Valkey Installation Script for Ubuntu 24.10"
    echo "============================================"
    echo
    
    parse_arguments "$@"
    check_root
    check_ubuntu_version
    
    # Installation steps
    update_system
    install_valkey
    configure_valkey
    configure_service
    setup_firewall
    
    # Test and summarize
    if test_installation; then
        show_summary
        print_success "Valkey installation completed successfully!"
    else
        print_error "Installation completed with errors. Please check the logs."
        exit 1
    fi
}

# Run main function with all arguments
main "$@"